# -*- coding: utf-8 -*-
"""Question2_TASKB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NAYnHSKeI4cEJfO-GeWuHbWR-7DAfr8c
"""

import torchaudio
import torchaudio.transforms as transforms
import matplotlib.pyplot as plt
import torch
from google.colab import files
import os

def upload_files():
    uploaded = files.upload()
    return list(uploaded.keys())

def load_audio(file_path):
    waveform, sample_rate = torchaudio.load(file_path)  # No need to specify format
    return waveform, sample_rate

def compute_spectrogram(waveform, sample_rate, n_fft=1024, hop_length=512):
    spectrogram_transform = transforms.Spectrogram(n_fft=n_fft, hop_length=hop_length, power=2.0)
    spectrogram = spectrogram_transform(waveform)
    return spectrogram

def plot_spectrograms(file_paths):
    fig, axes = plt.subplots(2, 2, figsize=(12, 8))
    axes = axes.flatten()

    for i, file_path in enumerate(file_paths):
        waveform, sample_rate = load_audio(file_path)
        spectrogram = compute_spectrogram(waveform, sample_rate)

        img = axes[i].imshow(torch.log(spectrogram[0] + 1e-5).numpy(), aspect='auto', origin='lower', cmap='magma')
        axes[i].set_title(f'Spectrogram of {file_path}', fontsize=12)
        axes[i].set_xlabel('Time (frames)', fontsize=10)
        axes[i].set_ylabel('Frequency (Hz)', fontsize=10)
        fig.colorbar(img, ax=axes[i], format='%+2.0f dB')

    plt.tight_layout()
    plt.show()

# Upload and process files
file_paths = upload_files()

plot_spectrograms(file_paths)